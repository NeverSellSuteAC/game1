[gd_scene load_steps=5 format=2]

[ext_resource path="res://TableItem/ItemBorder.tscn" type="PackedScene" id=1]
[ext_resource path="res://TableItem/new_styleboxflat.tres" type="StyleBox" id=3]

[sub_resource type="GDScript" id=1]
script/source = "extends PanelContainer

onready var panel = $ItemBorder
onready var imgText = $ItemBorder/ItemImg
onready var numLabel = $ItemBorder/ItemNum

var defaultImg = load(\"res://img/item_bg.png\")
var informationPanelObj = load(\"res://InformationPanel/InformationPanel.tscn\")
var defaultColor = Color(0, 0, 0, 0)


var defaultData = {
	\"base\":{},
	\"name\":\"\",
	\"img\":defaultImg,
	\"color\":defaultColor,
	\"num\":0,
}
var data = defaultData
# 状态枚举
enum State {
	ON,
	OFF,
	MOVE,
	DOWN
}
const ON = 0
const OFF = 1
const MOVE = 2
const DOWN = 3
# 当前状态
var currentState = State.OFF

# equipment,table,
var itemType = null

var root

func _ready():
	root = get_tree().current_scene.get_node(\"gui\")
	InitItem()


func InitItem():
	panel['custom_styles/panel']['border_color'] = data.color
	imgText['texture'] = data.img
	if data.num == 1:
		numLabel.text = \"\"
	elif data.num != 0:
		numLabel.text = str(data.num)
	else:
		numLabel.text = \"\"


func SetData(data):
	if data != null :
		self.data = data


func ReSetDefaultData():
	data = defaultData
	InitItem()


func _process(delta):
	if currentState == State.MOVE and !MouseClick() and data.num != 0 and !Config.mouse_click_move:
		currentState = State.OFF
		Show()
		dropInformationPanel()


var informationPanel = null

func createInformationPanel():
	if (informationPanel == null) :
		informationPanel = informationPanelObj.instance()
		informationPanel.setData(data)
		root.add_child(informationPanel)

func dropInformationPanel():
	if (informationPanel !=null) and (is_instance_valid(informationPanel)) :
		informationPanel.queue_free()
		informationPanel = null
	
	
# 鼠标事件判断
func MouseClick():
	return Input.is_action_pressed(\"mouse_click\")


# 鼠标右键事件判断
func MouseRightClick():
	return Input.is_action_pressed(\"mouse_click_right\")


# 鼠标移入
func _on_TableBorder_mouse_entered():
	if currentState == State.OFF:
		currentState = State.ON
	if currentState == State.ON and !MouseClick() and data.num != 0 and !Config.mouse_click_move:
		createInformationPanel()
		
		
# 鼠标移出
func _on_TableBorder_mouse_exited():
	if currentState == State.ON:
		currentState = State.OFF
		dropInformationPanel()
	if currentState != State.MOVE and !MouseClick() and  PlayerData.moveTemp != null:
		PlayerData.moveTemp = null

# 输入事件
func _on_TableBorder_gui_input(event):
	if currentState == State.ON  and PlayerData.moveTemp == null and MouseRightClick() and !MouseClick() and data.num != 0 :
		rightClick()
	if currentState == State.ON and MouseClick() and data.num != 0 and !Config.mouse_click_move:
		moveItem()
	if currentState == State.ON  and PlayerData.moveTemp != null and is_instance_valid(PlayerData.moveTemp):
		dropItemChecking(event)

func rightClick():
	# 下装备
	if itemType == \"equipment\":
		var i = 0
		var j = 0
		var x = 0
		var y = 0
		var isFirst = true
		for objList in PlayerData.tableItemList:
			for obj in objList:
				if obj.data.num == 0 and isFirst:
					x = i
					y = j
					isFirst = false
				j += 1
			i += 1
			j = 0
		PlayerData.moveTemp = PlayerData.tableItemList[x][y]
		rightClickItemA(PlayerData.equipmentList, PlayerData.dataList, false)
	# 穿装备
	elif itemType == \"table\":
		var isType = false
		# 如果是装备类型
		for key in PlayerData.equipmentTypeStrList:
			if data.type == key:
				isType = true
		if isType:
			var itemPosition = PlayerData.equipmentTypeStrList[data.type]
			var target = PlayerData.equipmentList[itemPosition.x][itemPosition.y]
			PlayerData.moveTemp = PlayerData.equipmentItemList[itemPosition.x][itemPosition.y]
			rightClickItemA(PlayerData.dataList, PlayerData.equipmentList, true)
			pass

func rightClickItemA(targetData, moveData, onEquipment):
	# 处理背包数据栏
	var selfTemp = self.data.duplicate(true)
	var moveTemp = PlayerData.moveTemp.data.duplicate(true)
	targetData[self.data.x][self.data.y] = moveTemp
	moveData[moveTemp.x][moveTemp.y] = selfTemp
			# 处理当前栏位
	self.SetData(PlayerData.moveTemp.data)
			# 更新下标
	self.data.x = selfTemp.x
	self.data.y = selfTemp.y
	InitItem()
			# 处理拖动的栏位
	if selfTemp.num == 0:
		PlayerData.moveTemp.ReSetDefaultData()
	else:
		PlayerData.moveTemp.SetData(selfTemp)
		PlayerData.moveTemp.InitItem()
		PlayerData.moveTemp.Show()
	PlayerData.moveTemp.currentState = State.OFF
			# 更新下标
	PlayerData.moveTemp.data.x = moveTemp.x
	PlayerData.moveTemp.data.y = moveTemp.y
			# 处理结束
	PlayerData.moveTemp = null
	# 属性变动
	playerDataChange(!onEquipment,selfTemp,moveTemp)

func moveItem():
	PlayerData.moveTemp = self
	currentState = State.MOVE
	var item = load(\"res://TableItem/MoveItem.tscn\").instance()
	item.SetData(data)
	item.currentState = State.MOVE
	root.add_child(item)
	Config.mouse_click_move = true
	Hiden()
	InitItem()
	dropInformationPanel()


func dropItemA(targetData, moveData, onEquipment):
	# 处理背包数据栏
	var selfTemp = self.data.duplicate(true)
	var moveTemp = PlayerData.moveTemp.data.duplicate(true)
	targetData[self.data.x][self.data.y] = moveTemp
	moveData[moveTemp.x][moveTemp.y] = selfTemp
			# 处理当前栏位
	self.SetData(PlayerData.moveTemp.data)
			# 更新下标
	self.data.x = selfTemp.x
	self.data.y = selfTemp.y
	InitItem()
			# 处理拖动的栏位
	if self.data.num == 0:
		PlayerData.moveTemp.ReSetDefaultData()
	else:
		PlayerData.moveTemp.SetData(selfTemp)
		PlayerData.moveTemp.InitItem()
		PlayerData.moveTemp.Show()
	PlayerData.moveTemp.currentState = State.OFF
			# 更新下标
	PlayerData.moveTemp.data.x = moveTemp.x
	PlayerData.moveTemp.data.y = moveTemp.y
			# 处理结束
	PlayerData.moveTemp = null
	# 属性变动
	if onEquipment != null:
		playerDataChange(onEquipment,selfTemp,moveTemp)


func playerDataChange(onEquipment,selfTemp,moveTemp):
	if onEquipment:
		for key in selfTemp.base:
			PlayerData.base[key] -= selfTemp.base[key]
		for key in moveTemp.base:
			PlayerData.base[key] += moveTemp.base[key]
	else:
		for key in selfTemp.base:
			PlayerData.base[key] += selfTemp.base[key]
		for key in moveTemp.base:
			PlayerData.base[key] -= moveTemp.base[key]
	get_tree().current_scene.emit_signal(\"base_update\")

func dropItemChecking(event):
	if itemType == \"table\":
		if PlayerData.moveTemp.itemType == \"table\":
			#道具栏移动
			dropItemA(PlayerData.dataList, PlayerData.dataList, null)
		elif PlayerData.moveTemp.itemType == \"equipment\":
			#下装备
			dropItemA(PlayerData.dataList, PlayerData.equipmentList, false)
	if itemType == \"equipment\":
		if PlayerData.moveTemp.itemType == \"table\":
			#穿装备
			#验证装备类型
			if !itemTypeChecking():
				return
			dropItemA(PlayerData.equipmentList, PlayerData.dataList, true)
		elif PlayerData.moveTemp.itemType == \"equipment\":
			#装备换位置
			#验证装备类型
			if !itemTypeChecking():
				return
			dropItemA(PlayerData.equipmentList, PlayerData.equipmentList, null)
			pass


func itemTypeChecking():
	if PlayerData.moveTemp.data.type == PlayerData.equipmentTypeList[self.data.x][self.data.y]:
		return true
	return false


func Hiden():
	panel.modulate = Color(1, 1, 1, 0.6)
	
func Show():
	panel.modulate = Color(1, 1, 1, 1)
"

[sub_resource type="Theme" id=2]

[node name="TableBorder" type="PanelContainer"]
mouse_filter = 1
script = SubResource( 1 )

[node name="ItemBorder" parent="." instance=ExtResource( 1 )]
theme = SubResource( 2 )
custom_styles/panel = ExtResource( 3 )

[node name="ItemImg" parent="ItemBorder" index="0"]
mouse_filter = 2

[connection signal="gui_input" from="." to="." method="_on_TableBorder_gui_input"]
[connection signal="mouse_entered" from="." to="." method="_on_TableBorder_mouse_entered"]
[connection signal="mouse_exited" from="." to="." method="_on_TableBorder_mouse_exited"]

[editable path="ItemBorder"]
